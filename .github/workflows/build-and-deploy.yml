name: Build and deploy Astro site

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  BUILD_PATH: "." # default value when not using subfolders
  # BUILD_PATH: subfolder

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
          
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "21"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/package-lock.json

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ${{ env.BUILD_PATH }}

      - name: Build TinaCMS
        env:
          NEXT_PUBLIC_TINA_CLIENT_ID: ${{ secrets.TINA_PUBLIC_CLIENT_ID }}
          TINA_TOKEN: ${{ secrets.TINA_TOKEN }}
        run: npx tinacms build

      - name: Build with Astro
        run: |
          ${{ steps.detect-package-manager.outputs.runner }} astro build \
            --site "https://newblog.thecell.eu/"
        working-directory: ${{ env.BUILD_PATH }}

      - name: Build Pagefind
        run: npm run postbuild
        working-directory: ${{ env.BUILD_PATH }}
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_PATH }}/dist
          name: Build

  web-deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
        contents: write
        
    needs: build
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: Build

    - run: mkdir dist
            
    - name: extract artifact for deployment
    # x – instructs tar to extract the files from the zipped file
    # v – means verbose, or to list out the files it’s extracting
    # f – tells tar the filename you want it to work on
      run: tar -xvf artifact.tar -C ./dist
          
    - run: ls -R
    
    - name: Sync files
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: adasrezept.tips
        username: ${{ secrets.FTPUSER }}
        password: ${{ secrets.FTPPASSWORD }}
        protocol: ftp
        port: 21
        local-dir: dist/
